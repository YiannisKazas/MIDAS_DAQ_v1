C51 COMPILER V8.12   FX2_TO_EXTSYNCFIFO                                                    04/19/2018 12:49:52 PAGE 1   


C51 COMPILER V8.12, COMPILATION OF MODULE FX2_TO_EXTSYNCFIFO
OBJECT MODULE PLACED IN FX2_to_extsyncFIFO.OBJ
COMPILER INVOKED BY: C:\Keil\C51\BIN\C51.EXE FX2_to_extsyncFIFO.c OPTIMIZE(6,SPEED) DEBUG OBJECTEXTEND

line level    source

   1          #pragma NOIV               // Do not generate interrupt vectors
   2          //-----------------------------------------------------------------------------
   3          //   File:       FX2_to_extsyncFIFO.c
   4          //   Contents:   Hooks required to implement FX2 GPIF to external sync. FIFO
   5          //               interface using CY4265-15AC
   6          //
   7          //   Copyright (c) 2003 Cypress Semiconductor, Inc. All rights reserved
   8          //-----------------------------------------------------------------------------
   9          #include "fx2.h"
  10          #include "fx2regs.h"
  11          #include "fx2sdly.h"            // SYNCDELAY macro, see Section 15.14 of FX2 Tech.
  12                                          // Ref. Manual for usage details.
  13          
  14          #define EXTFIFONOTFULL  GPIFREADYSTAT & bmBIT1
  15          #define EXTFIFONOTEMPTY GPIFREADYSTAT & bmBIT0
  16          #define bmEP0BSY 0x01
  17          #define LED_ALL         (bmBIT0 | bmBIT1 | bmBIT2 | bmBIT3)
  18          #define BIT0   0x01      
  19          #define BIT1   0x02
  20          #define BIT2   0x04
  21          #define BIT3   0x08
  22          #define BIT4   0x10
  23          #define BIT5   0x20
  24          #define BIT6   0x40
  25          #define BIT7   0x80
  26          
  27          
  28          extern BOOL GotSUD;             // Received setup data flag
  29          extern BOOL Sleep;
  30          extern BOOL Rwuen;
  31          extern BOOL Selfpwr;
  32          
  33          BYTE Configuration;             // Current configuration
  34          BYTE AlternateSetting;          // Alternate settings
  35          BYTE j,k,n;
  36          BYTE BITMASK[8] = {BIT0,BIT1,BIT2,BIT3,BIT4,BIT5,BIT6,BIT7};
  37          static WORD xdata LED_Count = 0;
  38          static BYTE xdata LED_Status = 0;
  39          BOOL energry_transfer_complete=FALSE;
  40          //-----------------------------------------------------------------------------
  41          // Task Dispatcher hooks
  42          // The following hooks are called by the task dispatcher.
  43          //-----------------------------------------------------------------------------
  44          void LED_Off (BYTE LED_Mask);
  45          void LED_On (BYTE LED_Mask);
  46          //void GpifInit ();
  47          
  48          void TD_Init( void )
  49          { // Called once at startup
  50   1      
  51   1        CPUCS = ((CPUCS & ~bmCLKSPD) | bmCLKSPD1);
  52   1        SYNCDELAY;
  53   1      //  FIFOPINPOLAR = 0x3F;        // ACTIVE HIGH
  54   1      
  55   1        PINFLAGSAB = 0x8E;                    // FLAGA= EP6FF, FLAGB= EP2EF
C51 COMPILER V8.12   FX2_TO_EXTSYNCFIFO                                                    04/19/2018 12:49:52 PAGE 2   

  56   1        SYNCDELAY;
  57   1        IFCONFIG = 0xE3; // 
  58   1      
  59   1        // IFCLKSRC=1   , FIFOs executes on internal clk source 
  60   1        // xMHz=1       , 48MHz operation
  61   1        // IFCLKOE=1    , Drive IFCLK pin signal at 48MHz
  62   1        // IFCLKPOL=1   , Invert IFCLK pin signal from internal clk
  63   1        // ASYNC=0      , Master samples synchronous
  64   1        // GSTATE=0     , Don't drive GPIF states out on PORTE[2:0], debug WF
  65   1        // IFCFG[1:0]=11, FX2 in slave FIFO mode
  66   1      
  67   1      
  68   1        // Registers which require a synchronization delay, see section 15.14
  69   1        // FIFORESET        FIFOPINPOLAR
  70   1        // INPKTEND         OUTPKTEND
  71   1        // EPxBCH:L         REVCTL
  72   1        // GPIFTCB3         GPIFTCB2
  73   1        // GPIFTCB1         GPIFTCB0
  74   1        // EPxFIFOPFH:L     EPxAUTOINLENH:L
  75   1        // EPxFIFOCFG       EPxGPIFFLGSEL
  76   1        // PINFLAGSxx       EPxFIFOIRQ
  77   1        // EPxFIFOIE        GPIFIRQ
  78   1        // GPIFIE           GPIFADRH:L
  79   1        // UDMACRCH:L       EPxGPIFTRIG
  80   1        // GPIFTRIG
  81   1        
  82   1        // Note: The pre-REVE EPxGPIFTCH/L register are affected, as well...
  83   1        //      ...these have been replaced by GPIFTC[B3:B0] registers
  84   1      
  85   1      
  86   1      
  87   1        EP2CFG = 0xA0;                //out 512 bytes, 4x, bulk
  88   1        SYNCDELAY;                    
  89   1        EP6CFG = 0xE0;                // E0=> in, 512 bytes, 4x, bulk
  90   1        SYNCDELAY;              
  91   1        EP4CFG = 0x02;                //clear valid bit
  92   1        SYNCDELAY;                     
  93   1        EP8CFG = 0x02;                //clear valid bit
  94   1        SYNCDELAY;   
  95   1      
  96   1        SYNCDELAY;
  97   1        FIFORESET = 0x80;             // activate NAK-ALL to avoid race conditions
  98   1        SYNCDELAY;                    // see TRM section 15.14
  99   1        FIFORESET = 0x02;             // reset, FIFO 2
 100   1        SYNCDELAY;                    // 
 101   1        FIFORESET = 0x04;             // reset, FIFO 4
 102   1        SYNCDELAY;                    // 
 103   1        FIFORESET = 0x06;             // reset, FIFO 6
 104   1        SYNCDELAY;                    // 
 105   1        FIFORESET = 0x08;             // reset, FIFO 8
 106   1        SYNCDELAY;                    // 
 107   1        FIFORESET = 0x00;             // deactivate NAK-ALL
 108   1      
 109   1      
 110   1        // handle the case where we were already in AUTO mode...
 111   1        // ...for example: back to back firmware downloads...
 112   1        SYNCDELAY;                    // 
 113   1        EP2FIFOCFG = 0x00;            // AUTOOUT=0, WORDWIDE=1
 114   1        
 115   1        // core needs to see AUTOOUT=0 to AUTOOUT=1 switch to arm endp's
 116   1        
 117   1        SYNCDELAY;                    // 
C51 COMPILER V8.12   FX2_TO_EXTSYNCFIFO                                                    04/19/2018 12:49:52 PAGE 3   

 118   1        EP2FIFOCFG = 0x3C;            // AUTOOUT=1, WORDWIDE=0        
 119   1        
 120   1        SYNCDELAY;                    // 
 121   1        EP6FIFOCFG = 0x5C;            // AUTOIN=1, ZEROLENIN=1, WORDWIDE=0, INFM1=1   
 122   1      
 123   1        SYNCDELAY;                    // 
 124   1        EP4FIFOCFG = 0x00;            //  WORDWIDE=0
 125   1      
 126   1        SYNCDELAY;                    // 
 127   1        EP8FIFOCFG = 0x00;            //  WORDWIDE=0
 128   1      
 129   1      
 130   1        SYNCDELAY;
 131   1        EP6AUTOINLENH = 0x02;            //0x02
 132   1        SYNCDELAY;  
 133   1        EP6AUTOINLENL = 0x00;         //      0x00  Auto-in length = 300 Bytes (100 frames * 3 bytes each)
 134   1        SYNCDELAY;                                            
 135   1      
 136   1      //  EP2AUTOOUTLENH = 0x00;
 137   1      //  SYNCDELAY;  
 138   1      //  EP2AUTOOUTLENL = 0x01;
 139   1      //  SYNCDELAY;
 140   1      
 141   1      }
 142          
 143          void TD_Poll( void )
 144          { // Called repeatedly while the device is idle
 145   1      
 146   1        // ...nothing to do... slave fifo's are in AUTO mode...
 147   1        
 148   1        
 149   1      }
 150           
 151            
 152          
 153          BOOL TD_Suspend(void)          // Called before the device goes into suspend mode
 154          {
 155   1         return(TRUE);
 156   1      }
 157          
 158          BOOL TD_Resume(void)          // Called after the device resumes
 159          {
 160   1         return(TRUE);
 161   1      }
 162          
 163          //-----------------------------------------------------------------------------
 164          // Device Request hooks
 165          //   The following hooks are called by the end point 0 device request parser.
 166          //-----------------------------------------------------------------------------
 167          
 168          BOOL DR_GetDescriptor(void)
 169          {
 170   1         return(TRUE);
 171   1      }
 172          
 173          BOOL DR_SetConfiguration(void)   // Called when a Set Configuration command is received
 174          {
 175   1         Configuration = SETUPDAT[2];
 176   1         return(TRUE);            // Handled by user code
 177   1      }
 178          
 179          BOOL DR_GetConfiguration(void)   // Called when a Get Configuration command is received
C51 COMPILER V8.12   FX2_TO_EXTSYNCFIFO                                                    04/19/2018 12:49:52 PAGE 4   

 180          {
 181   1         EP0BUF[0] = Configuration;
 182   1         EP0BCH = 0;
 183   1         EP0BCL = 1;
 184   1         return(TRUE);            // Handled by user code
 185   1      }
 186          
 187          BOOL DR_SetInterface(void)       // Called when a Set Interface command is received
 188          {
 189   1         AlternateSetting = SETUPDAT[2];
 190   1         return(TRUE);            // Handled by user code
 191   1      }
 192          
 193          BOOL DR_GetInterface(void)       // Called when a Set Interface command is received
 194          {
 195   1         EP0BUF[0] = AlternateSetting;
 196   1         EP0BCH = 0;
 197   1         EP0BCL = 1;
 198   1         return(TRUE);            // Handled by user code
 199   1      }
 200          
 201          BOOL DR_GetStatus(void)
 202          {
 203   1         return(TRUE);
 204   1      }
 205          
 206          BOOL DR_ClearFeature(void)
 207          {
 208   1         return(TRUE);
 209   1      }
 210          
 211          BOOL DR_SetFeature(void)
 212          {
 213   1         return(TRUE);
 214   1      }
 215          
 216          #define VX_B0 0xB0 // Return to Idle State
 217          #define VX_B1 0xB1 // Download Configuration
 218          #define VX_B2 0xB2 // Set DAC
 219          #define VX_B3 0xB3 // Start Recording
 220          #define VX_B4 0xB4 // Global Reset
 221          #define VX_B5 0xB5 // Read Current Consumption
 222          
 223          BOOL DR_VendorCmnd(void)
 224          {
 225   1        
 226   1        switch (SETUPDAT[1])
 227   1        {
 228   2      
 229   2              case VX_B0: // Idle state
 230   2              {               
 231   3                          OEC=0xFF; //Set Port_C as output
 232   3                              OED=0xFF; //Set Port_D as output
 233   3                              OEE=0x03; //Set pin #0,#1 of Port_E as outputs
 234   3                              IOC=0x00; //Port_C = "00000000" 
 235   3                              IOD=0x00; //Port_D = "00000000"
 236   3                              IOE=0x00; //Port_E = "xxxxxx00"
 237   3      
 238   3                              SYNCDELAY;
 239   3                              FIFORESET = 0x80;             // activate NAK-ALL to avoid race conditions
 240   3                              SYNCDELAY;                    // see TRM section 15.14
 241   3                              FIFORESET = 0x02;             // reset, FIFO 2
C51 COMPILER V8.12   FX2_TO_EXTSYNCFIFO                                                    04/19/2018 12:49:52 PAGE 5   

 242   3                              SYNCDELAY;                    // 
 243   3                              FIFORESET = 0x04;             // reset, FIFO 4
 244   3                              SYNCDELAY;                    // 
 245   3                              FIFORESET = 0x06;             // reset, FIFO 6
 246   3                              SYNCDELAY;                    // 
 247   3                              FIFORESET = 0x08;             // reset, FIFO 8
 248   3                              SYNCDELAY;                    // 
 249   3                              FIFORESET = 0x00;             // deactivate NAK-ALL
 250   3      
 251   3                              EP0BCL = 0;              //EP0BUF LSB BYTE COUNT 
 252   3                              SYNCDELAY;                                
 253   3                              EP0BCH = 0;
 254   3                              EP0BCL = 4;                   // Arm endpoint with 64# unsigned chars to transfer
 255   3                              EP0CS |= bmHSNAK;              // Acknowledge handshake phase of device request 
 256   3                break;
 257   3                              }
 258   2      
 259   2      
 260   2              case VX_B1: // Download Configuration   
 261   2              {               
 262   3                          OED=0xFF;   //Define all pins of port_D as outputs 
 263   3                              IOD=0x00;       //Port_D = "00000000" ---> CS = '0' (SPI_data line contains configuration data)
 264   3                              EP0BCL = 0;              //EP0BUF LSB BYTE COUNT 
 265   3                              while(EP01STAT & bmEP0BSY);     // wait until EP0 is available to be accessed by CPU
 266   3                          n=0;
 267   3                              for (n=0;n<4;n=n+1)        //sends 4 bytes          
 268   3                              {       
 269   4                                      for(k=0;k<8;k++) //SENDS ONE BYTE SERIALLY 
 270   4                                      {
 271   5                                              if(EP0BUF[n] & BITMASK[7-k])            
 272   5                                              {
 273   6                                                      IOD = IOD | (0x02);       //SDIHI
 274   6                                                      IOD = IOD | (0x01);       //SCKHI
 275   6                                                      IOD = IOD &~ (0x01);  //SCKLOW
 276   6                                              }
 277   5                                              else
 278   5                                              {
 279   6                                                      IOD = IOD &~ (0x02);  //SDILOW
 280   6                                                      IOD = IOD |  (0x01);  //SCKHI
 281   6                                                      IOD = IOD & ~ (0x01); //SCKLOW
 282   6                                              }
 283   5                                      }
 284   4                              }
 285   3                              IOD=0x00;// Port_D = "00000000" (Signal End of transfer)
 286   3                              SYNCDELAY;                                
 287   3                              EP0BCH = 0;
 288   3                              EP0BCL = 4;                   // Arm endpoint with 64# unsigned chars to transfer
 289   3                              EP0CS |= bmHSNAK;              // Acknowledge handshake phase of device request 
 290   3                break;
 291   3                              }
 292   2      
 293   2              case VX_B2: // Set DAC   
 294   2              {               
 295   3                          OED=0xFF; //Define all pins of port_D as outputs
 296   3                              IOD=0x04; //Port_D = "00000000" ---> CS = '1' (SPI_data line contains DAC data)
 297   3                              EP0BCL = 0;              //EP0BUF LSB BYTE COUNT 
 298   3                              while(EP01STAT & bmEP0BSY);     // wait until EP0 is available to be accessed by CPU
 299   3                          n=0;
 300   3                              for (n=0;n<2;n=n+1)        //sends 2 bytes          
 301   3                              {       
 302   4                                      for(k=0;k<8;k++) //SENDS ONE BYTE SERIALY 
 303   4                                      {
C51 COMPILER V8.12   FX2_TO_EXTSYNCFIFO                                                    04/19/2018 12:49:52 PAGE 6   

 304   5                                              if(EP0BUF[n] & BITMASK[7-k])            
 305   5                                              {
 306   6                                                      IOD = IOD | (0x02);   //SDIHI
 307   6                                                      IOD = IOD | (0x01);       //SCKHI
 308   6                                                      IOD = IOD &~ (0x01);  //SCKLOW
 309   6                                              }
 310   5                                              else
 311   5                                              {
 312   6                                                      IOD = IOD &~ (0x02);  //SDILOW
 313   6                                                      IOD = IOD  | (0x01);  //SCKHI
 314   6                                                      IOD = IOD & ~ (0x01); //SCKLOW
 315   6                                              }
 316   5                                      }
 317   4                              }
 318   3                              IOD=0x00; //Port_D = "00000000" (Return to Idle)
 319   3                              SYNCDELAY;                                
 320   3                              EP0BCH = 0;
 321   3                              EP0BCL = 4;                   // Arm endpoint with 64# unsigned chars to transfer
 322   3                              EP0CS |= bmHSNAK;              // Acknowledge handshake phase of device request 
 323   3                break;
 324   3                              }
 325   2      
 326   2      
 327   2              case VX_B3: // Start Recording
 328   2              {               
 329   3                          OEC=0xFF;
 330   3                              IOC=0x01;   //Port_C = "00000001" (Start_Rec bit = '1')
 331   3                              EP0BCL = 0;     //EP0BUF LSB BYTE COUNT 
 332   3                              SYNCDELAY;                                
 333   3                              EP0BCH = 0;
 334   3                              EP0BCL = 4;                   // Arm endpoint with 64# unsigned chars to transfer
 335   3                              EP0CS |= bmHSNAK;              // Acknowledge handshake phase of device request 
 336   3      
 337   3                break;
 338   3                              }
 339   2      
 340   2              case VX_B4: // Reset 
 341   2              {               
 342   3                          OED=0xFF;
 343   3                              IOD=0x60;//01100000 --------> SEL="110" 
 344   3      //                      n = 0;
 345   3      //                      for (n=0;n<500;n=n+1)
 346   3      //                      {
 347   3      //                      }
 348   3      //                      IOD=0x00;
 349   3                              EP0BCL = 0;              //EP0BUF LSB BYTE COUNT 
 350   3                              SYNCDELAY;                                
 351   3                              EP0BCH = 0;
 352   3                              EP0BCL = 4;                   // Arm endpoint with 64# unsigned chars to transfer
 353   3                              EP0CS |= bmHSNAK;              // Acknowledge handshake phase of device request 
 354   3      
 355   3                break;
 356   3                              }
 357   2      
 358   2          case VX_B5: // Read Current Consumption
 359   2          { 
 360   3                      OEE=0x03; //Set pins #0,#1 of Port_E as outputs and the rest as inputs 
 361   3                      IOE=0x00; 
 362   3                      SYNCDELAY;                                
 363   3                      EP0BCH = 0;
 364   3                      EP0BCL = 2;                   // Arm endpoint with 64# unsigned chars to transfer
 365   3                      EP0CS |= bmHSNAK;              // Acknowledge handshake phase of device request 
C51 COMPILER V8.12   FX2_TO_EXTSYNCFIFO                                                    04/19/2018 12:49:52 PAGE 7   

 366   3            break;
 367   3                }
 368   2      
 369   2      
 370   2          default:
 371   2              return(TRUE);
 372   2        }
 373   1      
 374   1        return(FALSE);
 375   1        }
 376           //{
 377          
 378          //-----------------------------------------------------------------------------
 379          // USB Interrupt Handlers
 380          //   The following functions are called by the USB interrupt jump table.
 381          //-----------------------------------------------------------------------------
 382          
 383          // Setup Data Available Interrupt Handler
 384          void ISR_Sudav(void) interrupt 0
 385          {
 386   1         GotSUD = TRUE;            // Set flag
 387   1         EZUSB_IRQ_CLEAR();
 388   1         USBIRQ = bmSUDAV;         // Clear SUDAV IRQ
 389   1      }
 390          
 391          // Setup Token Interrupt Handler
 392          void ISR_Sutok(void) interrupt 0
 393          {
 394   1         EZUSB_IRQ_CLEAR();
 395   1         USBIRQ = bmSUTOK;         // Clear SUTOK IRQ
 396   1      }
 397          
 398          void ISR_Sof(void) interrupt 0
 399          {
 400   1         EZUSB_IRQ_CLEAR();
 401   1         USBIRQ = bmSOF;            // Clear SOF IRQ
 402   1      }
 403          
 404          void ISR_Ures(void) interrupt 0
 405          {
 406   1         // whenever we get a USB reset, we should revert to full speed mode
 407   1         pConfigDscr = pFullSpeedConfigDscr;
 408   1         ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 409   1         pOtherConfigDscr = pHighSpeedConfigDscr;
 410   1         ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 411   1      
 412   1         EZUSB_IRQ_CLEAR();
 413   1         USBIRQ = bmURES;         // Clear URES IRQ
 414   1      }
 415          
 416          void ISR_Susp(void) interrupt 0
 417          {
 418   1         Sleep = TRUE;
 419   1         EZUSB_IRQ_CLEAR();
 420   1         USBIRQ = bmSUSP;
 421   1      }
 422          
 423          void ISR_Highspeed(void) interrupt 0
 424          {
 425   1         if (EZUSB_HIGHSPEED())
 426   1         {
 427   2            pConfigDscr = pHighSpeedConfigDscr;
C51 COMPILER V8.12   FX2_TO_EXTSYNCFIFO                                                    04/19/2018 12:49:52 PAGE 8   

 428   2            ((CONFIGDSCR xdata *) pConfigDscr)->type = CONFIG_DSCR;
 429   2            pOtherConfigDscr = pFullSpeedConfigDscr;
 430   2            ((CONFIGDSCR xdata *) pOtherConfigDscr)->type = OTHERSPEED_DSCR;
 431   2         }
 432   1      
 433   1         EZUSB_IRQ_CLEAR();
 434   1         USBIRQ = bmHSGRANT;
 435   1      }
 436          void ISR_Ep0ack(void) interrupt 0
 437          {
 438   1      }
 439          void ISR_Stub(void) interrupt 0
 440          {
 441   1      }
 442          void ISR_Ep0in(void) interrupt 0
 443          {
 444   1      }
 445          void ISR_Ep0out(void) interrupt 0
 446          {
 447   1      }
 448          void ISR_Ep1in(void) interrupt 0
 449          {
 450   1      }
 451          void ISR_Ep1out(void) interrupt 0
 452          {
 453   1      }
 454          void ISR_Ep2inout(void) interrupt 0
 455          {
 456   1      }
 457          void ISR_Ep4inout(void) interrupt 0
 458          {
 459   1      }
 460          void ISR_Ep6inout(void) interrupt 0
 461          {
 462   1      }
 463          void ISR_Ep8inout(void) interrupt 0
 464          {
 465   1      }
 466          void ISR_Ibn(void) interrupt 0
 467          {
 468   1      }
 469          void ISR_Ep0pingnak(void) interrupt 0
 470          {
 471   1      }
 472          void ISR_Ep1pingnak(void) interrupt 0
 473          {
 474   1      }
 475          void ISR_Ep2pingnak(void) interrupt 0
 476          {
 477   1      }
 478          void ISR_Ep4pingnak(void) interrupt 0
 479          {
 480   1      }
 481          void ISR_Ep6pingnak(void) interrupt 0
 482          {
 483   1      }
 484          void ISR_Ep8pingnak(void) interrupt 0
 485          {
 486   1      }
 487          void ISR_Errorlimit(void) interrupt 0
 488          {
 489   1      }
C51 COMPILER V8.12   FX2_TO_EXTSYNCFIFO                                                    04/19/2018 12:49:52 PAGE 9   

 490          void ISR_Ep2piderror(void) interrupt 0
 491          {
 492   1      }
 493          void ISR_Ep4piderror(void) interrupt 0
 494          {
 495   1      }
 496          void ISR_Ep6piderror(void) interrupt 0
 497          {
 498   1      }
 499          void ISR_Ep8piderror(void) interrupt 0
 500          {
 501   1      }
 502          void ISR_Ep2pflag(void) interrupt 0
 503          {
 504   1      }
 505          void ISR_Ep4pflag(void) interrupt 0
 506          {
 507   1      }
 508          void ISR_Ep6pflag(void) interrupt 0
 509          {
 510   1      }
 511          void ISR_Ep8pflag(void) interrupt 0
 512          {
 513   1      }
 514          void ISR_Ep2eflag(void) interrupt 0
 515          {
 516   1      }
 517          void ISR_Ep4eflag(void) interrupt 0
 518          {
 519   1      }
 520          void ISR_Ep6eflag(void) interrupt 0
 521          {
 522   1      }
 523          void ISR_Ep8eflag(void) interrupt 0
 524          {
 525   1      }
 526          void ISR_Ep2fflag(void) interrupt 0
 527          {
 528   1      }
 529          void ISR_Ep4fflag(void) interrupt 0
 530          {
 531   1      }
 532          void ISR_Ep6fflag(void) interrupt 0
 533          {
 534   1      }
 535          void ISR_Ep8fflag(void) interrupt 0
 536          {
 537   1      }
 538          void ISR_GpifComplete(void) interrupt 0
 539          {
 540   1      }
 541          void ISR_GpifWaveform(void) interrupt 0
 542          {
 543   1      }
 544          
 545          // ...debug LEDs: accessed via movx reads only ( through CPLD )
 546          // it may be worth noting here that the default monitor loads at 0xC000
 547          xdata volatile const BYTE LED0_ON  _at_ 0x8000;
 548          xdata volatile const BYTE LED0_OFF _at_ 0x8100;
 549          xdata volatile const BYTE LED1_ON  _at_ 0x9000;
 550          xdata volatile const BYTE LED1_OFF _at_ 0x9100;
 551          xdata volatile const BYTE LED2_ON  _at_ 0xA000;
C51 COMPILER V8.12   FX2_TO_EXTSYNCFIFO                                                    04/19/2018 12:49:52 PAGE 10  

 552          xdata volatile const BYTE LED2_OFF _at_ 0xA100;
 553          xdata volatile const BYTE LED3_ON  _at_ 0xB000;
 554          xdata volatile const BYTE LED3_OFF _at_ 0xB100;
 555          // use this global variable when (de)asserting debug LEDs...
 556          BYTE xdata ledX_rdvar = 0x00;
 557          BYTE xdata LED_State = 0;
 558          void LED_Off (BYTE LED_Mask)
 559          {
 560   1              if (LED_Mask & bmBIT0)
 561   1              {
 562   2                      ledX_rdvar = LED0_OFF;
 563   2                      LED_State &= ~bmBIT0;
 564   2              }
 565   1              if (LED_Mask & bmBIT1)
 566   1              {
 567   2                      ledX_rdvar = LED1_OFF;
 568   2                      LED_State &= ~bmBIT1;
 569   2              }
 570   1              if (LED_Mask & bmBIT2)
 571   1              {
 572   2                      ledX_rdvar = LED2_OFF;
 573   2                      LED_State &= ~bmBIT2;
 574   2              }
 575   1              if (LED_Mask & bmBIT3)
 576   1              {
 577   2                      ledX_rdvar = LED3_OFF;
 578   2                      LED_State &= ~bmBIT3;
 579   2              }
 580   1      }
 581          
 582          void LED_On (BYTE LED_Mask)
 583          {
 584   1              if (LED_Mask & bmBIT0)
 585   1              {
 586   2                      ledX_rdvar = LED0_ON;
 587   2                      LED_State |= bmBIT0;
 588   2              }
 589   1              if (LED_Mask & bmBIT1)
 590   1              {
 591   2                      ledX_rdvar = LED1_ON;
 592   2                      LED_State |= bmBIT1;
 593   2              }
 594   1              if (LED_Mask & bmBIT2)
 595   1              {
 596   2                      ledX_rdvar = LED2_ON;
 597   2                      LED_State |= bmBIT2;
 598   2              }
 599   1              if (LED_Mask & bmBIT3)
 600   1              {
 601   2                      ledX_rdvar = LED3_ON;
 602   2                      LED_State |= bmBIT3;
 603   2              }
 604   1      }
 605          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1041    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =      5    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     13    ----
C51 COMPILER V8.12   FX2_TO_EXTSYNCFIFO                                                    04/19/2018 12:49:52 PAGE 11  

   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
